:set number
:set autoindent
:set tabstop=2
:set shiftwidth=4
:set smarttab
:set softtabstop=4
:set mouse=a
:set clipboard+=unnamedplus
:set relativenumber
:set nowrap

call plug#begin()

Plug 'nvim-lua/plenary.nvim'

" nvim-cmp - Autocompletion for Neovim
Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-cmdline'
Plug 'hrsh7th/nvim-cmp'

" Snippet Engine for nvim-cmp
Plug 'L3MON4D3/LuaSnip'

" Neovim Telescope - Commands for finding, filtering, previewing, and picking files
Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.0' }

" NERDTree - Commands for showing file tree from neovim
Plug 'preservim/nerdtree'
Plug 'ahmedkhalf/project.nvim'

" Vim Airline - Custom styles for the status bar
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" move.nvim - Move lines vertically and horizontally
Plug 'fedepujol/move.nvim'

" CoC - Provides various language servers and features
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" One Dark Pro color theme
" Plug 'olimorris/onedarkpro.nvim'

" Neovim Autosave
Plug 'Pocco81/auto-save.nvim'

" Live grep support in Telescope
Plug 'nvim-telescope/telescope-live-grep-args.nvim'

call plug#end()

" Keybindings for move.nvim
nnoremap <silent> <A-j> :MoveLine(1)<CR>
nnoremap <silent> <A-k> :MoveLine(-1)<CR>
vnoremap <silent> <A-j> :MoveBlock(1)<CR>
vnoremap <silent> <A-k> :MoveBlock(-1)<CR>

" Keybindings for Telescope
nnoremap <silent> <A-f> :Telescope find_files<CR>
" nnoremap <silent> <C-g> :Telescope live_grep<CR>

" Enabling autocompletion via nvim-cmp
set completeopt=menu,menuone,noselect

" Enabling Prettier as a command
command! -nargs=0 Prettier :CocCommand prettier.forceFormatDocument
" Shortcut for calling Prettier
nnoremap <silent> <M-S-F> :Prettier<CR>

" CoC should use Ctrl + Space for triggering autocompletion
inoremap <silent><expr> <c-space> coc#refresh()

" Global coc extensions
let g:coc_global_extensions = [
		\ 'coc-json',
		\ 'coc-tsserver',
		\ 'coc-html',
		\ 'coc-css',
		\ 'coc-rust-analyzer',
		\ 'coc-prettier',
		\ 'coc-vetur',
		\ '@yaegassy/coc-tailwindcss3',
		\ 'coc-docker',
		\ 'coc-prisma',
		\ 'coc-pairs',
		\ 'coc-git',
		\ 'coc-typos',
		\ 'coc-eslint',
\]

" Set NERDTree toggle to space key
let NERDTreeMapActivateNode='<space>'

" Automatically reload NERDTree
autocmd BufEnter NERD_tree_* | execute 'normal R'

" Configuring the OneDark Pro color theme
" lua << EOF
"  require("onedarkpro").setup {
"		theme = 'onedark_dark'
"	}
"EOF

" Setting the color scheme
" colorscheme onedarkpro


lua << EOF
  require("auto-save").setup {
		-- your config goes here
		-- or just leave it empty :)
	}
  require("telescope").load_extension("projects")
  require("project_nvim").setup {
    -- your configuration comes here
    -- or leave it empty to use the default settings
    -- refer to the configuration section below
  }

  local actions = require("telescope.actions")
  require("telescope").setup({
    defaults = {
        mappings = {
            i = {
                ["<esc>"] = actions.close,
            },
        },
    }
  })

  local cmp = require("cmp")
  cmp.setup({
    snippet = {
      expand = function(args)
        require('luasnip').lsp_expand(args.body)
      end,
    },

    window = {
  		completion = cmp.config.window.bordered(),
	  	documentation = cmp.config.window.bordered(),
    },

    mapping = cmp.mapping.preset.insert({
      ['<C-b>'] = cmp.mapping.scroll_docs(-4),
		  -- ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
      ['<C-e>'] = cmp.mapping.abort(),
      ['<CR>'] = cmp.mapping.confirm({ select = true }),
    }),

		sources = cmp.config.sources({{ name = 'nvim_lsp' }, { name = 'luasnip' }, {}})
  })

  cmp.setup.cmdline(':', {
    mapping = cmp.mapping.preset.cmdline(),
		sources = cmp.config.sources({{ name = 'path' }, { name = 'cmdline' }})
  })
EOF
